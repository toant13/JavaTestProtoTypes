package mil.ssc.pac.jerseytest.test;

import static org.junit.Assert.assertTrue;

import java.net.URI;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.UriBuilder;

import mil.ssc.pac.jerseytest.test.psuedoapp.PsuedoApplication;

import org.eclipse.jetty.server.Server;
import org.glassfish.jersey.jetty.JettyHttpContainerFactory;
import org.glassfish.jersey.server.ResourceConfig;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class RestTestIT {
	private Server server;
	
	public class ServerThread implements Runnable{
		private Server server; 
		
		public ServerThread(Server server){
			this.server = server;
		}
		
		@Override
		public void run() {
			try {
				URI baseUri = UriBuilder.fromUri("http://localhost/").port(8081).build();
				ResourceConfig config = ResourceConfig.forApplicationClass(PsuedoApplication.class);
				this.server = JettyHttpContainerFactory.createServer(baseUri, config);
				this.server.join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
	}
	
	@Before
	public void setup() throws InterruptedException{	
		
		Runnable runnable = new Runnable(){
			public void run() {
				URI baseUri = UriBuilder.fromUri("http://localhost/").port(8081).build();
				ResourceConfig config = ResourceConfig.forApplicationClass(PsuedoApplication.class);
				this.server = JettyHttpContainerFactory.createServer(baseUri, config);
				this.server.join();
			}
		};
	}
	
	@After
	public void tearDown() throws Exception{
		this.server.stop();
		this.server.join();
	}
	
	@Test
	public void getTest()
	{	
		Client client = ClientBuilder.newClient();
		
		WebTarget target = client.target(getBaseURI());
		String result = target.path("myresource").path("msg").request().get(String.class);
		System.out.println(result);	
		assertTrue("Failed string match",result.equals("Hi therdfasdfse!"));
	}
	
	@Test
	public void getConnector()
	{	
		Client client = ClientBuilder.newClient();
		
		WebTarget target = client.target(getBaseURI());
		String result = target.path("myresource").path("connect").request().get(String.class);
		System.out.println(result);	
		assertTrue("Failed string match",result.equals("Hi second jersey!"));
	}
	
	private URI getBaseURI()
	{
		return UriBuilder.fromUri("http://localhost:8080/").build();
	}
}
